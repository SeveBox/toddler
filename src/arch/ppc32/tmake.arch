#!/usr/bin/python


global_tools = { \
    '.c' : { \
        'exec'  : 'powerpc-linux-gnu-gcc',
        'flags' : '-c -fno-builtin -fno-stack-protector -O2',
        'inc'   : '-I__inc__',
        'direct': '__src__',
        'obj'   : '-o __obj__ __src__',
        'dep'   : '-MM __src__ > __dep__',
    },

    '.S' : { \
        'exec'  : 'powerpc-linux-gnu-gcc',
        'flags' : '-c -fno-builtin -fno-stack-protector',
        'inc'   : '-I__inc__',
        'direct': '__src__',
        'obj'   : '-o __obj__ __src__',
        'dep'   : '-MM __src__ > __dep__',
    },
    
    'ld' : { \
        'exec'  : 'powerpc-linux-gnu-ld',
        'flags' : '-s',
        'script': '-T __script__',
        'obj'   : '-o __target__ __obj__',
    },
    
    'ar' : { \
        'exec'  : 'powerpc-linux-gnu-ar',
        'flags' : 'crD',
        'obj'   : '__target__ __obj__',
    },
    
    'strip' : { \
        'exec'  : 'powerpc-linux-gnu-strip',
        'flags' : '',
        'obj'   : '__target__',
    },
    
    'gen_bin' : { \
        'exec'  : 'powerpc-linux-gnu-objcopy',
        'flags' : '-O binary',
        'obj'   : '__src__ __target__',
    },
}

boot_tools = { \
    '.c' : { \
        'exec'  : 'powerpc-linux-gnu-gcc',
        'flags' : '-c -fno-builtin -fno-stack-protector -O2',
        'inc'   : '-I__inc__',
        'direct': '__src__',
        'obj'   : '-o __obj__ __src__',
        'dep'   : '-MM __src__ > __dep__',
    },

    '.S' : { \
        'exec'  : 'powerpc-linux-gnu-gcc',
        'flags' : '-c -fno-builtin -fno-stack-protector',
        'inc'   : '-I__inc__',
        'direct': '__src__',
        'obj'   : '-o __obj__ __src__',
        'dep'   : '-MM __src__ > __dep__',
    },
    
    'ld' : { \
        'exec'  : 'powerpc-linux-gnu-ld',
        'flags' : '-s',
        'script': '-T __script__',
        'obj'   : '-o __target__ __obj__',
    },
}

def build_loader():
    print_info('loader', 'Building loader')
    
    build_files(
        files = get_all_files(arch_dir + 'loader/', [ '.S', '.c' ]),
        target_name = obj_dir + 'loader/loader.elf',
        ext_dep = [ arch_dir + 'loader/loader.ld' ],
        ext_flags = { 'ld/script' : arch_dir + 'loader/loader.ld' },
        tools = arch_tools['boot_tools']
    )
    
    gen_bin(
        src_name = obj_dir + 'loader/loader.elf',
        target_name = bin_dir + 'tdlrldr.bin',
        tools = arch_tools['boot_tools']
    )
    
def build_hal():
    print_info('hal', 'Building HAL')
    build_dir(
        arch_dir + 'hal/', [ '.c', '.S' ],
        bin_dir + 'tdlrhal.bin',
        ext_dep = [ arch_dir + 'hal/hal.ld' ],
        ext_flags = { 'ld/script' : arch_dir + 'hal/hal.ld' },
    )
        
def build_arch():
    # Build loader
    if 'build_loader' in arch_funcs:
        arch_funcs['build_loader']()
    
    # Build HAL
    if 'build_hal' in arch_funcs:
        arch_funcs['build_hal']()
    
def build_disk():
    print_info('floppyimg', 'Building floppy image')

def qemu8():
    print_info('emulator', 'Starting SMP QEMU')
    
    loader_name = bin_dir + 'tdlrldr.bin'
    coreimg_name = loader_name
    
    # Compose the cmd
    cmd = 'qemu-system-ppc' + \
        ' -cpu G4 -M mac99 -m 512' + \
        ' -nographic -serial mon:stdio' + \
        ' -kernel ' + loader_name + \
        ' -initrd ' + coreimg_name
    cmd += ' -smp cores=2,threads=2,sockets=2'
    
    # Execute the cmd
    code = exec_cmd(cmd)
    assert(code == 0)
    
def qemu():
    print_info('emulator', 'Starting QEMU')
    
    loader_name = bin_dir + 'tdlrldr.bin'
    coreimg_name = loader_name#bin_dir + 'tdlrcore.img'
    
    # Compose the cmd
    cmd = 'qemu-system-ppc' + \
        ' -cpu G4 -M mac99 -m 512' + \
        ' -kernel ' + loader_name + \
        ' -initrd ' + coreimg_name
    #' -nographic -serial mon:stdio' + \
    
    # Execute the cmd
    code = exec_cmd(cmd)
    assert(code == 0)

def qemu_text():
    print_info('emulator', 'Starting QEMU')
    
    loader_name = bin_dir + 'tdlrldr.bin'
    coreimg_name = loader_name#bin_dir + 'tdlrcore.img'
    
    # Compose the cmd
    cmd = 'qemu-system-ppc' + \
        ' -cpu G4 -M mac99 -m 512' + \
        ' -nographic -serial mon:stdio' + \
        ' -kernel ' + loader_name + \
        ' -initrd ' + coreimg_name
    
    # Execute the cmd
    code = exec_cmd(cmd)
    assert(code == 0)

def start_emu():
    emu_type = 'qemu'
    if emu_type in arch_funcs:
        arch_funcs[emu_type]()
    

# Setup global tools
arch_tools['global_tools'] = global_tools

# Setup arch tools
arch_tools['boot_tools'] = boot_tools

# Setup callback functions
arch_funcs['build_arch'] = build_arch
arch_funcs['build_disk'] = build_disk

arch_funcs['build_loader'] = build_loader
arch_funcs['build_hal'] = build_hal

arch_funcs['qemu'] = qemu
arch_funcs['qemu_text'] = qemu_text
arch_funcs['qemu8'] = qemu8
arch_funcs['start_emu'] = start_emu
